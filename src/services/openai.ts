export interface OpenAIImageResponse {
  output: Array<{
    type: string;
    result?: string;
    content?: string;
  }>;
}

export class OpenAIService {
  private apiKey: string;
  private baseUrl = 'https://api.openai.com/v1';

  constructor(apiKey: string) {
    this.apiKey = apiKey;
  }

  private async imageUrlToBase64(imageUrl: string): Promise<string> {
    const response = await fetch(imageUrl);
    if (!response.ok) {
      throw new Error(`Failed to fetch image: ${response.status}`);
    }
    
    const blob = await response.blob();
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = () => {
        const result = reader.result as string;
        // Remove the data:image/...;base64, prefix
        const base64 = result.split(',')[1];
        resolve(base64);
      };
      reader.onerror = reject;
      reader.readAsDataURL(blob);
    });
  }

  async editImage(
    imageUrl: string, 
    prompt: string, 
    onProgress?: (message: string) => void
  ): Promise<string> {
    try {
      if (onProgress) onProgress('Converting image to base64...');
      
      const base64Image = await this.imageUrlToBase64(imageUrl);
      
      if (onProgress) onProgress('Sending to OpenAI...');

      const response = await fetch(`${this.baseUrl}/responses`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.apiKey}`
        },
        body: JSON.stringify({
          model: 'gpt-4.1',
          input: [
            {
              role: 'user',
              content: [
                { type: 'input_text', text: prompt },
                {
                  type: 'input_image',
                  image_url: `data:image/jpeg;base64,${base64Image}`
                }
              ]
            }
          ],
          tools: [
            {
              type: 'image_generation',
              size: '1024x1024',
              quality: 'high',
              output_format: 'png'
            }
          ]
        })
      });

      if (!response.ok) {
        const errorData = await response.text();
        throw new Error(`OpenAI API error: ${response.status} ${response.statusText}\n${errorData}`);
      }

      const data: OpenAIImageResponse = await response.json();
      
      if (onProgress) onProgress('Processing response...');

      const imageData = data.output
        .filter(output => output.type === 'image_generation_call')
        .map(output => output.result)
        .filter(Boolean);

      if (imageData.length === 0) {
        throw new Error('No image generated by OpenAI');
      }

      // Convert base64 to data URL for display
      return `data:image/png;base64,${imageData[0]}`;
      
    } catch (error) {
      console.error('OpenAI API error:', error);
      throw error;
    }
  }
}